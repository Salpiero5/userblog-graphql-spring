type Query {
  userById(id: ID): User
  usersByName(namePart: String): [User]
  users: [User!]!
  blogs: [Blog!]!
  blogById(id: ID): Blog
  blogsByUserId(id: ID): [Blog]

  # query to see if it's either a blog or a comment
  articleChecker(articleType: String!): [article]

  # filter based on either published or content
  blogsByFilter(filter: BlogFilter): [Blog]
  comments: [Comment!]!
}

type Mutation {
  createUser(input: CreateUserInput!): User
}

type User {
  id: ID!
  firstName: String!
  email: String
  yearOfBirth: Int
  blogs: [Blog]
  comments: [Comment]
}

input CreateUserInput {
  firstName: String!
  email: String
  yearOfBirth: Int
}

input BlogFilter {
  published: Boolean
  content: String
}

type Blog implements Publishable{
  id: ID!
  title: String!
  content: String!
  userId: ID!
  user: User
  comments: [Comment]
  isPublished: Boolean!

}

type Comment implements Publishable{
  id: ID!
  content: String!
  blog: Blog
  commentator: User
  isPublished: Boolean!
}

interface Publishable {
  isPublished: Boolean!
}

union article = Comment | Blog

